#!/usr/bin/python

import sys,os
import shutil

from collections import defaultdict

distro_dic = {}
docker_dic = {}

def fill_dictionary():
	global distro_dic
	global docker_dic

	distro_dic = defaultdict(dict)
	distro_dic['nxp']['zeus']="https://github.com/engicam-stable/engicam-bsp-release.git -b zeus -m engicam-bsp-release.xml"
	distro_dic['nxp']['zeus-2.3']="https://github.com/engicam-stable/engicam-bsp-release.git -b zeus-nxp -m engicam-bsp-release.xml"
	distro_dic['st']['dunfell']="https://github.com/engicam-stable/engicam-bsp-release.git -b dunfell -m engicam-bsp-release.xml"
	distro_dic['st']['dunfell-5.10_ugea']="https://github.com/engicam-stable/engicam-bsp-release.git -b dunfell-st-5.10_ugea -m engicam-bsp-release.xml"
	distro_dic['st']['dunfell-5.10_icore']="https://github.com/engicam-stable/engicam-bsp-release.git -b dunfell-st-5.10_icore -m engicam-bsp-release.xml"	
	distro_dic['nxp']['gatesgarth']="https://github.com/engicam-stable/engicam-bsp-release.git -b gatesgarth-nxp -m engicam-bsp-release.xml"
	distro_dic['nxp']['hardknott']="https://github.com/engicam-stable/engicam-bsp-release.git -b hardknott-nxp -m engicam-bsp-release.xml"
	distro_dic['nxp']['honister']="https://github.com/nxp-imx/imx-manifest -b imx-linux-honister -m imx-5.15.5-1.0.0.xml"
	distro_dic['nxp']['kirkstone']="https://github.com/nxp-imx/imx-manifest -b imx-linux-kirkstone -m imx-5.15.71-2.2.0.xml"
#	distro_dic['st']['kirkstone']="https://github.com/engicam-stable/engicam-bsp-release.git -b kirkstone-st -m engicam-bsp-release.xml"
	distro_dic['st']['kirkstone']="https://github.com/engicam-stable/engicam-bsp-release.git -b kirkstone_22.11-st -m engicam-bsp-release.xml"

	docker_dic = defaultdict(dict)
	docker_dic['nxp']['zeus']="ubuntu18"
	docker_dic['nxp']['zeus-2.3']="ubuntu18"
	docker_dic['st']['dunfell']="ubuntu18"
	docker_dic['st']['dunfell-5.10_ugea']="ubuntu18dunfell"
	docker_dic['dunfell-5.10_icore']="ubuntu18dunfell"	
	docker_dic['nxp']['gatesgarth']="ubuntu18"
	docker_dic['nxp']['hardknott']="ubuntu20"
	docker_dic['nxp']['honister']="ubuntu20honister"
	docker_dic['nxp']['kirkstone']="ubuntu20honister"
#	docker_dic['st']['kirkstone']="ubuntu18"
	docker_dic['st']['kirkstone']="ubuntu18"

def print_usage():
	print ("Usage:\n%s <SOC vendor> <yocto version>\n" % (sys.argv[0]))
	print ("es.\n\n %s nxp zeus "% (sys.argv[0]))
	print_available()
	quit()

def print_available():
	global distro_dic
	print("Combination available:")
	for vendor in distro_dic.keys():
		print("\nVendor %s:\n"%vendor)
		for yocto in distro_dic[vendor].keys():
  			print(yocto)

def clone_sources(mvendor,yversion):
	global distro_dic
	global docker_dic

	try:
		repofiles=distro_dic[mvendor][yversion]
	except:
		print_available()
		exit()

	try:
		ubuntuname=docker_dic[mvendor][yversion]
	except:
		print("error on docker_dic")
		exit()

	path=mvendor + "_" + yversion

	containername="ubuntu_" + ubuntuname

	try:
		os.mkdir(path)
	except OSError:
		print ("the directory %s already exist" % path)
		os.chdir(path)
	else:
		print ("Successfully created the directory %s " % path)
		os.chdir(path)
		print(repofiles)
		os.system("repo init -u " + repofiles)
		if yversion == "honister":
			os.system("sed -i '/^<\/manifest>.*/i <project name=\"meta-engicam-nxp\" path=\"sources\/meta-engicam-nxp\" remote= \"engicam\" revision=\"honister\"\/>' ./.repo/manifests/imx-5.15.5-1.0.0.xml")
			os.system("sed -i '/^<manifest>.*/a <remote fetch=\"https:\/\/github.com\/engicam-stable\" name=\"engicam\" \/>' ./.repo/manifests/imx-5.15.5-1.0.0.xml")
		os.system("repo sync")

	os.chdir("..")
	cur_path = os.getcwd() + "/" + path
	docker_path = "dockerfiles/"+path
	try:
		os.mkdir(docker_path)
	except OSError:
		print ("the directory %s already exist" % docker_path)
		os.chdir(docker_path)
	else:
		print ("Successfully created the directory %s " % docker_path)
		os.chdir(docker_path)
		shutil.copy("../Dockerfile_" + ubuntuname, "Dockerfile")

		os.system("sudo docker build --build-arg UID=$(id -u) -t " + containername +" .")

	os.system("sudo docker run -v %s:/yocto -v/lib/modules/:/lib/modules -v/usr/src/:/usr/src  -ti " % (cur_path) + containername)

def main():

	fill_dictionary()

	if len(sys.argv) != 3:
		print_usage()
		quit()

	vendor=sys.argv[1]
	yoctoversion=sys.argv[2]

	clone_sources(vendor,yoctoversion)

if __name__ == "__main__":
    main()
